import { WebPlugin } from '@capacitor/core';

import type { MLPluginPlugin, ClassifyImageOptions, ClassifyImageResult, LLMInferenceOptions, LLMInferenceResult } from './definitions';

export class MLPluginWeb extends WebPlugin implements MLPluginPlugin {
  async echo(options: { value: string }): Promise<{ value: string }> {
    console.log('ECHO', options);
    return options;
  }

  async classifyImage(options: ClassifyImageOptions): Promise<ClassifyImageResult> {
    console.log('classifyImage called on web with base64 image length:', options.base64Image.length);
    // Stub implementation for web
    return {
      predictions: [
        { label: 'web-stub-prediction', confidence: 0.95 }
      ]
    };
  }

  async generateText(options: LLMInferenceOptions): Promise<LLMInferenceResult> {
    console.log('generateText called on web with prompt:', options.prompt);
    if (options.modelConfig?.downloadAtRuntime) {
      console.log('Web stub: Would download model from:', options.modelConfig.downloadUrl);
    }
    // Stub implementation for web
    return {
      response: `Web stub response to: "${options.prompt}". This would normally be generated by an on-device LLM.`,
      tokensUsed: 25
    };
  }
}
